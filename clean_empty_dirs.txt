automatically find and remove all empty folders from a given location on your MacBook (M2 chip) using a Terminal command. Here‚Äôs how you can do it
find /path/to/your/folder -type d -empty -delete

For example:
find ~/Downloads/PhoneBackup -type d -empty -delete

find: The command-line utility to search files/directories.
	‚Ä¢	/path/to/your/folder: The root folder to start searching.
	‚Ä¢	-type d: Only find directories.
	‚Ä¢	-empty: Only directories that are empty.
	‚Ä¢	-delete: Delete them (‚ö†Ô∏è use with caution).



Safety Tip: Run a dry test before deletion
If you want to see which folders will be deleted first (without deleting them), run:
find /path/to/your/folder -type d -empty
Then, if everything looks good, re-run with -delete.



clean_empty_dirs.sh:
#!/bin/bash
TARGET_DIR="$1"
if [ -z "$TARGET_DIR" ]; then
  echo "Usage: ./clean_empty_dirs.sh /path/to/target"
  exit 1
fi

find "$TARGET_DIR" -type d -empty -delete
echo "Empty folders deleted in: $TARGET_DIR"

chmod +x clean_empty_dirs.sh
./clean_empty_dirs.sh ~/Downloads/PhoneBackup


Does the command delete folders containing hidden files (like .DS_Store, .nomedia, etc.)?
No, the command:
find /path/to/your/folder -type d -empty -delete
does not delete folders that contain hidden files, because:
	‚Ä¢	Hidden files still count as contents, so the folder is not considered ‚Äúempty‚Äù.

 If you want to delete folders that only contain hidden files, you‚Äôll need a more advanced command.
 find /path/to/your/folder -type d -exec sh -c 'shopt -s dotglob nullglob; files=("$1"/*); [ ${#files[@]} -eq 0 ] && rmdir "$1"' _ {} \;
 However, this is bash-specific and may behave differently on macOS‚Äôs default shell (zsh or sh).

Best cross-shell solution for macOS (works with zsh or bash):
find /path/to/your/folder -type d -exec bash -c '
  for dir do
    shopt -s nullglob dotglob
    files=("$dir"/*)
    (( ${#files[@]} == 0 )) && rmdir "$dir"
  done
' bash {} +



 clean_empty_dirs.sh
 #!/bin/bash

# Default to current directory if no argument is provided
TARGET_DIR="${1:-$(pwd)}"
IGNORE_TYPES="${2:-}"  # e.g., "*.DS_Store|*.nomedia"

echo "üîç Scanning directory: $TARGET_DIR"
echo "üîΩ Ignoring file types (if any): $IGNORE_TYPES"
echo

# Function to check if a directory is "effectively empty"
is_effectively_empty() {
  local dir="$1"
  local files=()
  shopt -s nullglob dotglob

  # Read all files into array
  for file in "$dir"/*; do
    skip=false
    for pattern in ${IGNORE_TYPES//|/ }; do
      [[ "$(basename "$file")" == $pattern ]] && skip=true && break
    done
    $skip || files+=("$file")
  done

  [[ ${#files[@]} -eq 0 ]]
}

# Step 1: Find all directories and check for "effective emptiness"
mapfile -t EMPTY_DIRS < <(find "$TARGET_DIR" -type d | while read -r dir; do
  if is_effectively_empty "$dir"; then
    echo "$dir"
  fi
done)

COUNT=${#EMPTY_DIRS[@]}

# Step 2: Show summary and prompt
if [[ $COUNT -eq 0 ]]; then
  echo "‚úÖ No empty directories found (after ignoring patterns)."
  exit 0
fi

echo "‚ö†Ô∏è  Found $COUNT empty directories (effectively)."
echo
for dir in "${EMPTY_DIRS[@]}"; do
  echo "üóÇÔ∏è  $dir"
done

echo
read -rp "‚ùì Do you want to delete these folders? (yes/no): " CONFIRM

if [[ "$CONFIRM" == "yes" || "$CONFIRM" == "y" ]]; then
  for dir in "${EMPTY_DIRS[@]}"; do
    rmdir "$dir" 2>/dev/null
  done
  echo "üßπ Deleted $COUNT empty directories."
else
  echo "üö´ Aborted. No directories deleted."
fi

Features of this script
	1.	Works on current directory by default, or takes a path argument.
	2.	Lists empty folders.
	3.	Optionally ignores specific file types (e.g., .DS_Store, .nomedia) when checking if folders are empty.
	4.	Prompts for confirmation before deletion, and shows a count of folders to be deleted.

Save as a file: nano clean_empty_dirs.sh
Paste the script, then save.
Make it executable: chmod +x clean_empty_dirs.sh
Run it: Just scan current folder: ./clean_empty_dirs.sh
Scan a specific folder: ./clean_empty_dirs.sh /path/to/folder
Ignore specific file types (e.g., .DS_Store and .nomedia): ./clean_empty_dirs.sh /path/to/folder "*.DS_Store|*.nomedia"




clean_empty_dirs.sh (Updated with Logging)

#!/bin/bash

# ------------------------------
# Config & Setup
# ------------------------------
TARGET_DIR="${1:-$(pwd)}"
IGNORE_TYPES="${2:-}"  # Patterns like "*.DS_Store|*.nomedia"
TIMESTAMP=$(date '+%Y-%m-%d_%H-%M-%S')
LOG_FILE="$TARGET_DIR/clean_empty_dirs_$TIMESTAMP.log"

echo "üîç Scanning directory: $TARGET_DIR" | tee -a "$LOG_FILE"
echo "üìù Log file: $LOG_FILE" | tee -a "$LOG_FILE"
[[ -n "$IGNORE_TYPES" ]] && echo "üîΩ Ignoring file types: $IGNORE_TYPES" | tee -a "$LOG_FILE"
echo "" | tee -a "$LOG_FILE"

# ------------------------------
# Helper: Check if folder is empty except ignored files
# ------------------------------
is_effectively_empty() {
  local dir="$1"
  local skip
  local files=()
  shopt -s nullglob dotglob

  for file in "$dir"/*; do
    skip=false
    for pattern in ${IGNORE_TYPES//|/ }; do
      [[ "$(basename "$file")" == $pattern ]] && skip=true && break
    done
    $skip || files+=("$file")
  done

  [[ ${#files[@]} -eq 0 ]]
}

# ------------------------------
# Collect Empty Directories
# ------------------------------
mapfile -t EMPTY_DIRS < <(find "$TARGET_DIR" -type d | while read -r dir; do
  if is_effectively_empty "$dir"; then
    echo "$dir"
  fi
done)

COUNT=${#EMPTY_DIRS[@]}

# ------------------------------
# Prompt and Delete
# ------------------------------
if [[ $COUNT -eq 0 ]]; then
  echo "‚úÖ No empty directories found (after ignoring patterns)." | tee -a "$LOG_FILE"
  exit 0
fi

echo "‚ö†Ô∏è  Found $COUNT empty directories:" | tee -a "$LOG_FILE"
for dir in "${EMPTY_DIRS[@]}"; do
  echo "üóÇÔ∏è  $dir" | tee -a "$LOG_FILE"
done

echo "" | tee -a "$LOG_FILE"
read -rp "‚ùì Do you want to delete these folders? (yes/no): " CONFIRM

if [[ "$CONFIRM" == "yes" || "$CONFIRM" == "y" ]]; then
  echo "üßπ Deleting..." | tee -a "$LOG_FILE"
  SUCCESS=0
  FAILURES=0

  for dir in "${EMPTY_DIRS[@]}"; do
    if rmdir "$dir" 2>>"$LOG_FILE"; then
      echo "‚úÖ Deleted: $dir" >> "$LOG_FILE"
      ((SUCCESS++))
    else
      echo "‚ùå Failed to delete: $dir" >> "$LOG_FILE"
      ((FAILURES++))
    fi
  done

  echo "" >> "$LOG_FILE"
  echo "üìä Summary: Deleted $SUCCESS folders, Failed $FAILURES" | tee -a "$LOG_FILE"
else
  echo "üö´ Aborted. No directories deleted." | tee -a "$LOG_FILE"
fi


New Features:
	‚Ä¢	Creates a log file (clean_empty_dirs.log) in the current or specified directory.
	‚Ä¢	Logs all deleted folders, timestamps, and errors (if any).
	‚Ä¢	Keeps the script safe and interactive: asks before deleting.
	‚Ä¢	Fully compatible with hidden files like .DS_Store, .nomedia.
















